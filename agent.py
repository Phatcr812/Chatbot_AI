import requests
import urllib.parse
import re
import random
from langchain_core.messages import HumanMessage, AIMessage
from database import get_all_products, get_connection


class TogetherLLM:
    def __init__(self, api_key="tgp_v1_pBfE1wXKZ6Sm-oHiiILbg_ySNpW1Avgo8gQZ32siQ98", model="mistralai/Mistral-7B-Instruct-v0.1"):
        self.api_key = api_key
        self.model = model

    def generate(self, messages):
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }

        payload = {
            "model": self.model,
            "messages": messages,
            "temperature": 0.7
        }

        response = requests.post("https://api.together.xyz/v1/chat/completions", headers=headers, json=payload)

        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        else:
            return f"‚ö† L·ªói g·ªçi Together AI: {response.text}"


class SimpleChatbot:
    def detect_language(self, text):
        try:
            lang = detect(text)
            return "vi" if lang == "vi" else "en"
        except:
            return "vi"
    
    def __init__(self):
        self.llm = TogetherLLM()
        self.products_data = get_all_products()
        self.available_colors = set()
        self.available_sizes = set()
        self.color_vn_to_en = {
            "ƒëen": "black", "tr·∫Øng": "white", "xanh": "blue", "n√¢u": "brown", "h·ªìng": "pink",
            "t√≠m": "purple", "v√†ng": "yellow", "x√°m": "gray", "xanh navy": "navy", "ƒë·ªè": "red",
        }
        self.load_attributes_from_db()

    def load_attributes_from_db(self):
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT value_name, attribute_id FROM dbo.attributes_values")
        rows = cursor.fetchall()
        conn.close()

        for name, attr_id in rows:
            name = name.strip().lower()
            if attr_id == 1:
                self.available_sizes.add(name)
            elif attr_id == 2:
                self.available_colors.add(name)

    def extract_filters_from_input(self, text):
        keyword = ""
        color = None
        min_price = None
        max_price = None

        text = text.lower()
        words = text.split()

        # T√¨m keyword trong t√™n s·∫£n ph·∫©m (t·ª± do)
        for w in words:
            for p_list in self.products_data.values():
                for p in p_list:
                    if w in p.get("name", "").lower():
                        keyword = w
                        break

        # T√¨m m√†u (vi·ªát ho√†c anh)
        for w in words:
            vn_color = self.color_vn_to_en.get(w)
            if w in self.available_colors or (vn_color and vn_color in self.available_colors):
                color = w
                break

        # T√¨m kho·∫£ng gi√°
        price_numbers = re.findall(r"\d+[.,]?\d*\s*(tr|tri·ªáu|k|ngh√¨n|ng√†n)?", text)
        price_values = []
        for p in price_numbers:
            match = re.match(r"(\d+[.,]?\d*)\s*(tr|tri·ªáu|k|ngh√¨n|ng√†n)?", p)
            if match:
                num = float(match.group(1).replace(",", "."))
                unit = match.group(2)
                if unit in ["tr", "tri·ªáu"]:
                    num *= 1_000_000
                elif unit in ["k", "ngh√¨n", "ng√†n"]:
                    num *= 1_000
                price_values.append(int(num))

        if len(price_values) == 1:
            min_price = price_values[0] - 500_000
            max_price = price_values[0] + 500_000
        elif len(price_values) >= 2:
            min_price, max_price = sorted(price_values[:2])

        return {
            "keyword": keyword,
            "color": color,
            "min_price": min_price,
            "max_price": max_price
        }

    def filter_products(self, filters, language_id=1):
        keyword = filters["keyword"]
        color = filters["color"]
        min_price = filters["min_price"]
        max_price = filters["max_price"]

        result = []
        for p in self.products_data.get(language_id, []):
            name = p["name"].lower()
            desc = p.get("description", "").lower()

            # So kh·ªõp keyword
            keyword_matched = keyword in name if keyword else True

            # So kh·ªõp m√†u
            color_matched = True
            if color:
                color_vn = self.color_vn_to_en.get(color, color)
                color_in_variants = any(
                    color_vn in v.get("color", "").lower() for v in p.get("variants", [])
                )
                color_in_name = color in name or color in desc
                color_matched = color_in_variants or color_in_name

            # So kh·ªõp gi√°
            price_matched = True
            price_candidates = []
            for v in p.get("variants", []):
                sale_price = v.get("sale_price")
                if sale_price and isinstance(sale_price, (int, float)):
                    price_candidates.append(sale_price)
            if not price_candidates:
                base_price = p.get("base_price", 0)
                if isinstance(base_price, (int, float)):
                    price_candidates.append(base_price)
            if min_price is not None and max_price is not None:
                price_matched = any(min_price <= price <= max_price for price in price_candidates)

            if keyword_matched and color_matched and price_matched:
                result.append(p)

        return result[:5]

    def build_product_response(self, products):
        lines = []
        for product in products:
            name = product["name"]
            encoded_name = urllib.parse.quote(name)
            link = f"http://localhost:4200/client/usd/en/product?name={encoded_name}&isActive=true&page=0&size=10&sortBy=id&sortDir=asc"
            lines.append(f"- {name}\nüîó {link}\n")
        return "\n".join(lines)

    def chat(self, user_input, chat_history):
        filters = self.extract_filters_from_input(user_input)
        matching = self.filter_products(filters)

        # Tr∆∞·ªùng h·ª£p c√≥ keyword => ƒëang nh·∫Øc ƒë·∫øn s·∫£n ph·∫©m => ƒë∆∞a g·ª£i √Ω
        if filters["keyword"] and matching:
            intros = [
                "üéâ D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë s·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n:",
                "‚ú® G·ª£i √Ω m·ªôt v√†i s·∫£n ph·∫©m b·∫°n c√≥ th·ªÉ quan t√¢m:",
                "üõçÔ∏è M·ªôt s·ªë l·ª±a ch·ªçn ch√∫ng t√¥i t√¨m th·∫•y d·ª±a tr√™n ƒëi·ªÅu b·∫°n ƒë√£ n√≥i:"
            ]
            intro = random.choice(intros)
            return intro + "\n\n" + self.build_product_response(matching)

        # Ng∆∞·ª£c l·∫°i, kh√¥ng n√≥i r√µ v·ªÅ s·∫£n ph·∫©m => giao ti·∫øp b√¨nh th∆∞·ªùng
        messages = [
            {"role": "system", "content": """
                  B·∫°n l√† m·ªôt chuy√™n gia chƒÉm s√≥c kh√°ch h√†ng c·ªßa trang web brand v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám, lu√¥n th·∫•u hi·ªÉu nhu c·∫ßu c·ªßa kh√°ch h√†ng v√† bi·∫øt c√°ch gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ m·ªôt c√°ch chuy√™n nghi·ªáp, t·∫≠n t√¢m. H√£y ƒë√≥ng vai l√† ƒë·∫°i di·ªán h·ªó tr·ª£ c·ªßa Brand. Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
                    1. Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ m·ªôt c√°ch nhanh ch√≥ng, hi·ªáu qu·∫£, v√† mang l·∫°i tr·∫£i nghi·ªám t·ªët nh·∫•t cho kh√°ch h√†ng.
                    2. Duy tr√¨ th√°i ƒë·ªô t√≠ch c·ª±c, th√¢n thi·ªán, nh∆∞ng v·∫´n ƒë·∫£m b·∫£o t√≠nh chuy√™n nghi·ªáp.
                    3. Cung c·∫•p c√°c gi·∫£i ph√°p th·ª±c t·∫ø, s√°ng t·∫°o v√† ph√π h·ª£p v·ªõi t·ª´ng t√¨nh hu·ªëng c·ª• th·ªÉ.
                    4. ƒê∆∞a ra h∆∞·ªõng d·∫´n r√µ r√†ng, d·ªÖ hi·ªÉu ƒë·ªÉ kh√°ch h√†ng c·∫£m th·∫•y ƒë∆∞·ª£c h·ªó tr·ª£ t·ªëi ƒëa.
                H√£y gi√∫p t√¥i x·ª≠ l√Ω t√¨nh hu·ªëng c·ªßa kh√°ch h√†ng. ƒê∆∞a ra l·ªùi ph·∫£n h·ªìi chi ti·∫øt, ƒë·∫ßy ƒë·ªß v√† mang l·∫°i s·ª± h√†i l√≤ng cao nh·∫•t cho kh√°ch h√†ng.
                """}
        ]
        for msg in chat_history:
            if isinstance(msg, HumanMessage):
                messages.append({"role": "user", "content": msg.content})
            elif isinstance(msg, AIMessage):
                messages.append({"role": "assistant", "content": msg.content})

        messages.append({"role": "user", "content": user_input})
        return self.llm.generate(messages)


def handle_input(chatbot: SimpleChatbot, user_input, chat_history):
    result = chatbot.chat(user_input, chat_history)
    chat_history.extend([
        HumanMessage(content=user_input),
        AIMessage(content=result),
    ])
    return result, chat_history

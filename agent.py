import requests
import time
from langchain_core.prompts import ChatPromptTemplate
from qdrant_client import QdrantClient
from sentence_transformers import SentenceTransformer
from database import get_all_products

# K·∫øt n·ªëi v·ªõi Qdrant
QDRANT_HOST = "https://bcde43c2-f65a-4b07-8724-000a34d547ca.us-east4-0.gcp.cloud.qdrant.io"
client = QdrantClient(url=QDRANT_HOST, api_key="API")
model = SentenceTransformer("all-MiniLM-L6-v2")

COLLECTION_NAME = "product_vectors"

class ProductCache:
    def __init__(self, refresh_time=300):  # L√†m m·ªõi m·ªói 5 ph√∫t
        self.products_info = {}
        self.last_refresh = 0
        self.refresh_time = refresh_time

    def get_products(self):
        if not self.products_info or time.time() - self.last_refresh > self.refresh_time:
            print("üîÑ Refreshing product data from database...")
            self.products_info = get_all_products()
            self.last_refresh = time.time()
        return self.products_info
    

class ChatTogether:
    product_cache = ProductCache()
        
    def __init__(self):
        self.api_key = "your_together_ai_api_key"
        self.model = "meta-llama/Meta-Llama-3-8B-Instruct-Turbo"
        self.products_info = ChatTogether.product_cache.get_products()

    def chat(self, user_input, language_id=1):
        lang_map = {1: "vnd/vi", 2: "usd/en", 3: "jpy/jp"}
        lang_path = lang_map.get(language_id, "usd/en")

        query_vector = model.encode(user_input).tolist()

        search_results = client.search(
            collection_name=COLLECTION_NAME,
            query_vector=query_vector,
            query_filter=None,
            limit=5,
            with_payload=True
        )

        if not search_results or len(search_results) == 0:
            return self.ask_together_ai(user_input, language_id)

        response = "D∆∞·ªõi ƒë√¢y l√† c√°c s·∫£n ph·∫©m ph√π h·ª£p:\n"
        for result in search_results:
            product = result.payload
            if "name" in product:
                product_url = f"http://localhost:4200/client/{lang_map.get(product.get('language_id', 2), 'usd/en')}/product?name={product.get('name', '').replace(' ', '%20')}"
                response += f"\nüîπ {product.get('name', 'Kh√¥ng r√µ')} - Gi√°: {product.get('price', 'Ch∆∞a c√≥ gi√°')} VND\nXem t·∫°i: {product_url}\n"

        return response

    def ask_together_ai(self, user_input, language_id):
        headers = {"Authorization": f"Bearer {self.api_key}", "Content-Type": "application/json"}
        messages = [{"role": "user", "content": user_input}]
        payload = {"model": self.model, "messages": messages, "temperature": 0.7}

        try:
            response = requests.post("https://api.together.ai/v1/chat/completions", headers=headers, json=payload)
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"]
        except requests.exceptions.RequestException as e:
            return f"‚ö† L·ªói g·ªçi API Together AI: {e}"

    def get_prompt(self):
        """T·∫°o prompt ƒë·ªÉ AI hi·ªÉu danh s√°ch s·∫£n ph·∫©m t·ª´ database."""
        self.products_info = ChatTogether.product_cache.get_products()  # C·∫≠p nh·∫≠t d·ªØ li·ªáu tr∆∞·ªõc khi t·∫°o prompt

        product_descriptions = ""
        for lang, products in self.products_info.items():
            title = {
                1: "--- S·∫£n ph·∫©m ti·∫øng Vi·ªát ---",
                2: "--- Products in English ---",
                3: "--- Êó•Êú¨Ë™û„ÅÆÂïÜÂìÅ ---"
            }.get(lang, "--- Products ---")

            product_descriptions += f"\n{title}\n"
            for product in products:
                if isinstance(product, dict):
                    product_descriptions += (
                        f"\n- {product.get('name', 'Kh√¥ng r√µ')}: "
                        f"{product.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')}, "
                        f"Gi√°: {product.get('price', 'Ch∆∞a c√≥ gi√°')} VND."
                    )

        return f"""B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng th√¥ng minh c·ªßa c·ª≠a h√†ng tr·ª±c tuy·∫øn. H√£y gi√∫p kh√°ch h√†ng b·∫±ng c√°ch:
1. Gi·ªõi thi·ªáu v·ªÅ s·∫£n ph·∫©m m√† ch√∫ng t√¥i b√°n.
2. G·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n nhu c·∫ßu c·ªßa kh√°ch h√†ng.
3. N·∫øu kh√°ch h√†ng h·ªèi v·ªÅ s·∫£n ph·∫©m, h√£y ki·ªÉm tra danh s√°ch c√≥ s·∫µn v√† cung c·∫•p th√¥ng tin chi ti·∫øt.
Danh s√°ch s·∫£n ph·∫©m c√≥ trong database:
{product_descriptions}

H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, chuy√™n nghi·ªáp v√† th√¢n thi·ªán!"""

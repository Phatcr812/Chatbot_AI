import pyodbc
from qdrant_client import QdrantClient
from qdrant_client.models import PointStruct
from sentence_transformers import SentenceTransformer
import uuid

# C·∫•u h√¨nh k·∫øt n·ªëi SQL Server
DB_CONFIG = {
    "server": "CHAUNGUYENPHAT",
    "database": "DATN_FASHION_SHOP",
    "username": "sa",
    "password": "123",
    "driver": "{ODBC Driver 17 for SQL Server}"
}

# K·∫øt n·ªëi v·ªõi Qdrant
client = QdrantClient(
    url="https://bcde43c2-f65a-4b07-8724-000a34d547ca.us-east4-0.gcp.cloud.qdrant.io",
    api_key="API"
)
model = SentenceTransformer("all-MiniLM-L6-v2")

# T·∫°o collection n·∫øu ch∆∞a c√≥
COLLECTION_NAME = "product_vectors"

def create_qdrant_collection():
    """T·∫°o collection trong Qdrant n·∫øu ch∆∞a t·ªìn t·∫°i"""
    existing_collections = client.get_collections().collections
    collection_names = [col.name for col in existing_collections]
    
    if COLLECTION_NAME not in collection_names:
        client.create_collection(
            collection_name=COLLECTION_NAME,
            vectors_config={"size": 384, "distance": "Cosine"}
        )
        print(f"‚úÖ Collection '{COLLECTION_NAME}' ƒë√£ ƒë∆∞·ª£c t·∫°o!")
    else:
        print(f"‚úÖ Collection '{COLLECTION_NAME}' ƒë√£ t·ªìn t·∫°i.")

create_qdrant_collection()

def get_connection():
    """K·∫øt n·ªëi ƒë·∫øn SQL Server"""
    conn = pyodbc.connect(
        f"DRIVER={DB_CONFIG['driver']};"
        f"SERVER={DB_CONFIG['server']};"
        f"DATABASE={DB_CONFIG['database']};"
        f"UID={DB_CONFIG['username']};"
        f"PWD={DB_CONFIG['password']}"
    )
    return conn

def get_all_products():
    """L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ SQL Server"""
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT 
            pt.name, 
            CAST(pt.description AS NVARCHAR(MAX)),  -- ƒê·∫£m b·∫£o description l√† string
            pt.material, 
            pt.care, 
            p.base_price, 
            p.status, 
            p.is_active, 
            pt.language_id, 
            pt.product_id
        FROM 
            products_translations pt
        JOIN 
            products p ON pt.product_id = p.id
        WHERE 
            p.is_active = 1;
    """)
    
    products = cursor.fetchall()
    conn.close()

    if not products:
        return {}

    product_dict = {}
    for row in products:
        name, description, material, care, base_price, status, is_active, language_id, product_id = row

        # Ki·ªÉm tra n·∫øu description l√† None ho·∫∑c int, chuy·ªÉn th√†nh string
        if not isinstance(description, str):
            description = str(description) if description is not None else "Kh√¥ng c√≥ m√¥ t·∫£"

        product_info = {
            "id": str(product_id),
            "name": name.strip() if name else "Kh√¥ng r√µ",
            "description": description.strip(),  # Lu√¥n ƒë·∫£m b·∫£o l√† chu·ªói
            "material": material.strip() if material else "Kh√¥ng c√≥ th√¥ng tin",
            "care": care.strip() if care else "Kh√¥ng c√≥ th√¥ng tin",
            "price": base_price if base_price else "Ch∆∞a c√≥ gi√°",
            "status": status.strip() if status else "Kh√¥ng r√µ",
            "is_active": bool(is_active)
        }
        
        if language_id not in product_dict:
            product_dict[language_id] = []

        # ƒê·∫£m b·∫£o `product_info` l√† dictionary, kh√¥ng ph·∫£i s·ªë nguy√™n
        if isinstance(product_info, dict):
            product_dict[language_id].append(product_info)
        else:
            print(f"‚ùå L·ªñI: `product_info` kh√¥ng ph·∫£i dictionary! D·ªØ li·ªáu l·ªói: {product_info}")

    return product_dict

def auto_index_new_products():
    """T·ª± ƒë·ªông index s·∫£n ph·∫©m m·ªõi v√†o Qdrant."""
    products_dict = get_all_products()
    new_products = []

    for lang, products in products_dict.items():
        for product in products:
            # Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong Qdrant ch∆∞a
            search_result = client.search(
                collection_name=COLLECTION_NAME,
                query_vector=model.encode(product["description"]).tolist(),
                limit=1
            )
            if not search_result:  # N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥, th√™m v√†o danh s√°ch m·ªõi
                new_products.append(product)

    if new_products:
        print(f"üì¢ T√¨m th·∫•y {len(new_products)} s·∫£n ph·∫©m m·ªõi. ƒêang c·∫≠p nh·∫≠t Qdrant...")
        index_products_to_qdrant(new_products)
    else:
        print("‚úÖ Kh√¥ng c√≥ s·∫£n ph·∫©m m·ªõi c·∫ßn c·∫≠p nh·∫≠t.")



def index_products_to_qdrant():
    """ƒê∆∞a d·ªØ li·ªáu t·ª´ SQL Server l√™n Qdrant"""
    products_dict = get_all_products()

    points = []
    for lang, products in products_dict.items():
        for product in products:
            if not isinstance(product, dict):
                print(f"‚ùå L·ªñI: `product` kh√¥ng ph·∫£i dictionary! D·ªØ li·ªáu l·ªói: {product}")
                continue  # B·ªè qua d·ªØ li·ªáu l·ªói

            # Ki·ªÉm tra `description` c√≥ b·ªã r·ªóng kh√¥ng
            description = product["description"] if product["description"] else "Kh√¥ng c√≥ m√¥ t·∫£"
            
            vector = model.encode(description).tolist()
            points.append(PointStruct(id=str(uuid.uuid4()), vector=vector, payload=product))

    client.upsert(
        collection_name=COLLECTION_NAME,
        points=points
    )
    print(f"‚úÖ ƒê√£ index {len(points)} s·∫£n ph·∫©m v√†o Qdrant.")



# Ch·∫°y ƒë·ªÉ ƒë∆∞a d·ªØ li·ªáu l√™n Qdrant
index_products_to_qdrant()
